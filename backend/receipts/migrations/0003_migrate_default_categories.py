# Generated by Django 4.2.16 on 2025-07-20 07:01

from django.db import migrations


def create_default_categories(apps, schema_editor):
    """
    Create default categories for all users and migrate existing transactions.
    """
    Category = apps.get_model('receipts', 'Category')
    Transaction = apps.get_model('receipts', 'Transaction')
    Account = apps.get_model('accounts', 'Account')
    
    # Default expense categories mapping from old hardcoded choices
    default_expense_categories = [
        ('Office Supplies', 'office_supplies'),
        ('Travel', 'travel'),
        ('Meals & Entertainment', 'meals'),
        ('Utilities', 'utilities'),
        ('Rent', 'rent'),
        ('Software & Subscriptions', 'software'),
        ('Hardware & Equipment', 'hardware'),
        ('Professional Services', 'professional_services'),
        ('Marketing & Advertising', 'marketing'),
        ('Other', 'other'),
    ]
    
    # Default income categories (common for UK businesses)
    default_income_categories = [
        ('Sales Revenue', None),
        ('Service Income', None),
        ('Consulting Income', None),
        ('Interest Income', None),
        ('Other Income', None),
    ]
    
    # Get all users
    users = Account.objects.all()
    
    for user in users:
        # Create default expense categories
        category_mapping = {}
        for category_name, old_value in default_expense_categories:
            category, created = Category.objects.get_or_create(
                user=user,
                name=category_name,
                type='expense',
                defaults={
                    'description': f'Default {category_name.lower()} category',
                    'is_default': True
                }
            )
            if old_value:
                category_mapping[old_value] = category
        
        # Create default income categories
        for category_name, _ in default_income_categories:
            Category.objects.get_or_create(
                user=user,
                name=category_name,
                type='income',
                defaults={
                    'description': f'Default {category_name.lower()} category',
                    'is_default': True
                }
            )
        
        # Migrate existing transactions for this user
        transactions = Transaction.objects.filter(owner=user)
        for transaction in transactions:
            old_category = transaction.old_category
            if old_category in category_mapping:
                transaction.category = category_mapping[old_category]
                transaction.save()


def reverse_migration(apps, schema_editor):
    """
    Reverse the migration by removing all categories.
    """
    Category = apps.get_model('receipts', 'Category')
    Category.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('receipts', '0002_category_alter_transaction_category'),
    ]

    operations = [
        migrations.RunPython(create_default_categories, reverse_migration),
    ]
